@using System.Linq
@using System.Net.NetworkInformation;
@inject HttpClient Http

<PageTitle>Computer info: @ComputerName</PageTitle>
<div style="margin: 5px; border: 1px solid #ddd">
<span style="font-size: 2em;">@ComputerName.ToUpper()</span><span style="font-size: 1.5em;">&nbsp;&nbsp;&nbsp;[@IP]</span> <span title="Update" style="font-size: 1em; display: block;" @onclick="Update">🔁 Last update: @time @updateText</span>
<div class="tabs">
    @foreach (Button button in buttons)
    {
        <span class="tab @(button.active ? "tab-active" : "")" @onclick=@(()=>Click(button))>@button.Text</span>
    }
</div>

@if (fullView) // Want to toggle Everything component
{
    <Classes />
} else

if (dataFiltered == null)
{
    <span>LOADING DATA</span>
} else if (dataFiltered.Count > 0)
    {
        @foreach (var item in dataFiltered)
        {
            <p style="padding: 3px; border-bottom: 1px solid #aaa; margin: 0">
            @foreach (var item1 in item)
            {
                <span>@item1 &nbsp;</span>
            }
            </p>
        }
    }
else {
    <span>NO DATA</span>
}
</div>

@code {

    [CascadingParameter(Name = "ComputerName")]
    public string ComputerName { get; init; } = "";

    [CascadingParameter(Name = "Backend")]
    public string backend { get; init; } = "http://localhost:5310/";

    private List<string[]>? data = null;
    private List<string[]>? dataFiltered = null;
    private Dictionary<string, string> users = new Dictionary<string, string>{};
    private bool fullView = false;
    private string updateText = "";
    string time = "NA";
    string IP = "WAITING FOR IP";

    struct Button
    {
        public string Name { get; set; }
        public string Text { get; set; }
        public bool active { get; set; }

        public Button() : this("button", "text", false) {}

        public Button(string n, string t, bool a) {
            Name = n;
            Text = t;
            active = a;
        }

    }
    List<Button> buttons = new List<Button>
        {
            new Button("all", "Сводка", true),
            new Button("bios", "BIOS", false),
            new Button("cs", "Компьютер", false),
            new Button("os", "OS", false),
            new Button("full", "Всё", false),
        };

    protected async override Task OnInitializedAsync()
    {
        await GetUsers();
        await LoadData(ComputerName, "brief");
        GetIp(ComputerName);
    }

    private async Task LoadData(string computer, string class_) // class_ = class, "brief" or empty
    {
        Dictionary<string, string> req = new Dictionary<string, string> {
            {"action", "read"}, {"target","info"}, { "pc", computer }, { "class", class_ } };
        var response = await Http.PostAsJsonAsync<Dictionary<string, string>>(backend, req);
        var data1 = await response.Content.ReadFromJsonAsync<Dictionary<string, string>[]>();

        req = new Dictionary<string, string> {
            {"action", "read"}, {"target","info"}, { "pc", computer }, { "class", "Win32_LocalTime" } };
        response = await Http.PostAsJsonAsync<Dictionary<string, string>>(backend, req);
        time = ParseTime(await response.Content.ReadFromJsonAsync<Dictionary<string, string>[]>());

        if (data1 != null)
        {
            data = new List<string[]>{};
            foreach (var rec in data1)
            {
                if (rec["class"] == "Win32_ComputerSystem" && rec["param"] == "UserName")
                    data.Add(new string[] { rec["class"], rec["param"], $"{rec["value"]} ({users[rec["value"].Replace("VMZ\\","")]})" });
                else
                    data.Add(new string[] { rec["class"], rec["param"], rec["value"] });
            }
            dataFiltered = data;
            StateHasChanged();
        }
    }

    private string ParseTime(Dictionary<string, string>[]? timeStruct)
    {
        if (timeStruct != null)
        {
            (int year, int month, int day, int hour, int minute, int second) t = (0,0,0,0,0,0);
            foreach (var item in timeStruct)
            {
                switch (item["param"])
                {
                    case "Year":
                        t.year = int.Parse(item["value"]);
                        break;
                    case "Month":
                        t.month = int.Parse(item["value"]);
                        break;
                    case "Day":
                        t.day = int.Parse(item["value"]);
                        break;
                    case "Hour":
                        t.hour = int.Parse(item["value"]);
                        break;
                    case "Minute":
                        t.minute = int.Parse(item["value"]);
                        break;
                    case "Second":
                        t.second = int.Parse(item["value"]);
                        break;
                }
            }
            return $"{t.day}.{t.month}.{t.year} {t.hour}:{t.minute}:{t.second}";
        }
        return "NA";
    }

    private void Click(Button btn)
    {
        Tab(btn.Name);
        buttons = buttons.Select(b => { b.active = false; return b; } ).ToList();
        buttons = buttons.Select(b => { if (b.Name == btn.Name) b.active = true; return b; } ).ToList();
    }

    private void Tab(string tab)
    {
        fullView = false;
        if (data != null)
        {
            switch (tab) {
                case "all":
                    dataFiltered = data;
                    break;
                case "bios":
                    dataFiltered = data.FindAll(s => s[0] == "Win32_BIOS");
                    break;
                case "cs":
                    dataFiltered = data.FindAll(s => s[0] == "Win32_ComputerSystem");
                    break;
                case "os":
                    dataFiltered = data.FindAll(s => s[0] == "Win32_OperatingSystem");
                    break;
                case "full":
                    dataFiltered = new List<string[]>{};
                    fullView = true;
                    break;
            }
        }
    }

    private async void Update()
    {
        Dictionary<string, string> req = new Dictionary<string, string> {
                {"action", "update"}, {"target", ComputerName} };
        var response = await Http.PostAsJsonAsync<Dictionary<string, string>>(backend, req);
        var text = await response.Content.ReadAsStringAsync();
        if (!string.IsNullOrEmpty(text)) updateText = text;
        StateHasChanged(); // Slower but whatever
    }

    private async void GetIp(string ComputerName)
    {
        var p = new Ping();
        try
        {
            var res = await p.SendPingAsync(ComputerName, 2000);
            if (res.Status == IPStatus.Success)
                IP = res.Address.ToString();
            else
                IP = "NOT AVAILABLE";
        }
        catch { IP = "NETWORK ERROR"; }
        StateHasChanged();
    }

    private async Task GetUsers()
    {
        Dictionary<string, string> req = new Dictionary<string, string> {
            {"action", "read"}, {"target","users"} };
        var response = await Http.PostAsJsonAsync<Dictionary<string, string>>(backend, req);
        users = await response.Content.ReadFromJsonAsync<Dictionary<string, string>>() ?? new Dictionary<string, string>{};
    }
}

<style>
    .tab {
        border: 1px solid #888;
        background-color: #ccc;
        display: flex;
        width: 18%;
        justify-content: center;
    }
    .tab-active {
        background-color: #eee;
    }
    .tabs {
        background-color: #eee;
        display: flex;
        position: relative;
    }
</style>
