@page "/info/{ComputerNameParameter?}"
@using System.Linq
@using System.Net.NetworkInformation;
@using System.Globalization;
@inject _20strike_ui.Data.DataFetcher DataFetcher

<PageTitle>Computer info: @ComputerName</PageTitle>
<div style="margin: 5px; border: 1px solid #ddd">
<span style="font-size: 2em;">@ComputerName.ToUpper()</span><span style="font-size: 1.5em;">&nbsp; &nbsp;[@IP]</span> <span title="Update" style="font-size: 1em; display: block;" @onclick="Update">🔁 Last update: @time @updateText</span>
<div class="tabs">
    @foreach (Button button in buttons)
    {
        <span class="tab @(button.active ? "tab-active" : "")" @onclick=@(()=>Click(button))>@button.Text</span>
    }
</div>

@if (mode == Modes.full) // Want to toggle Everything component
{
    <Classes />
} else if (mode == Modes.control)
{
    <Invoker />
} else

if (dataFiltered == null)
{
    <span>LOADING DATA</span>
} else if (dataFiltered.Count > 0)
    {
        <h4>Computer</h4>
            <table class="table table-bordered">
                <tr>
                    <td>Domain</td><td>@ListData("Win32_ComputerSystem", "Domain")[0]</td>
                </tr>
                <tr>
                    <td>Name</td><td>@ListData("Win32_ComputerSystem", "Name")[0]</td>
                </tr>
                <tr>
                    <td>UserName</td><td class="text-break">@ListData("Win32_ComputerSystem", "UserName")[0]</td>
                </tr>
            </table>
        <h4>OS</h4>
            <table class="table table-bordered">
                <tr>
                    <td>Caption</td><td>@ListData("Win32_OperatingSystem", "Caption")[0]</td>
                </tr>
                <tr>
                    <td>OSArchitecture</td><td>@ListData("Win32_OperatingSystem", "OSArchitecture")[0]</td>
                </tr>
                <tr>
                    <td>Version</td><td>@ListData("Win32_OperatingSystem", "Version")[0]</td>
                </tr>
                <tr>
                    <td>InstallDate</td><td>@ParseTime(ListData("Win32_OperatingSystem", "InstallDate")[0])</td>
                </tr>
            </table>
        <h4>Disk</h4>
            <table class="table table-bordered">
                @foreach(var item in ListData("Win32_DiskDrive", "Model")) {
                <tr><td>Model</td><td>@item</td></tr> }
            </table>
            <table class="table table-bordered">
                @{
                    string[] names = new string[] { };
                    string[] sizes = new string[] { };
                    string[] frees = new string[] { };
                    var diskinfo = dataFiltered.FindAll(s => s[0] == "Win32_LogicalDisk");
                    diskinfo.Add(new string[] {"Win32_LogicalDisk", "a", "a"});
                    var prev = "a";
                    string name = "", size = "", free = "";
                    for (int i = 0; i < diskinfo.Count; i++)
                    {
                        if (prev.CompareTo(diskinfo[i][1]) == 0 || prev.CompareTo(diskinfo[i][1]) == 1)
                        {
                            names = names.Append(name).ToArray();
                            sizes = sizes.Append(size).ToArray();
                            frees = frees.Append(free).ToArray();
                            name = size = free = "";
                        }

                        if (diskinfo[i][1] == "Name") name = diskinfo[i][2];
                        if (diskinfo[i][1] == "Size") size = ParseToMB(diskinfo[i][2]);
                        if (diskinfo[i][1] == "FreeSpace") free = ParseToMB(diskinfo[i][2]);
                        prev = diskinfo[i][1];
                    }
                    <tr><td>Name</td>
                        @foreach(var item in names) {
                        <td>@item</td> }
                    </tr>
                    <tr><td>Size</td>
                        @foreach(var item in sizes) {
                        <td>@item</td> }
                    </tr>
                    <tr><td>Free Space</td>
                        @foreach(var item in frees) {
                        <td>@item</td> }
                    </tr>
                }
            </table>
        <h4>Memory</h4>
            <table class="table table-bordered">
                    @{long mem = 0; long t = 0;}
                    <tr><td>Installed</td>
                    @foreach(var item in ListData("Win32_PhysicalMemory", "Capacity")) {
                        t = 0;
                        <td>@ParseToMB(item)</td>
                        Int64.TryParse(item, out t); mem += t; }
                </tr>
                <tr><td>Total</td><td>@ParseToMB(mem.ToString())</td></tr>
            </table>
        <h4>Processor</h4>
            <table class="table table-bordered">
                <tr>
                    <td>Processor</td><td class="text-break">@ListData("Win32_Processor", "Name")[0]</td>
                </tr>
                <tr>
                    <td>LogicalProcessors</td><td>@ListData("Win32_ComputerSystem", "NumberOfLogicalProcessors")[0]</td>
                </tr>
            </table>
        <h4>Video</h4>
            <table class="table table-bordered">
                    @foreach(var item in ListData("Win32_VideoController", "Name")) {
                    <tr><td>Name</td><td class="text-break">@item</td></tr> }
            </table>
        <h4>Monitor</h4>
            <table class="table table-bordered">
                    @foreach(var item in ListMonitors()) {
                    <tr><td>Name</td><td class="text-break">@item</td></tr> }
            </table>
        <h4>BIOS</h4>
            <table class="table table-bordered">
                <tr>
                    <td>BIOSVersion</td><td>@ListData("Win32_BIOS", "Version")[0]</td>
                </tr>
                <tr>
                    <td>Caption</td><td class="text-break">@ListData("Win32_BIOS", "Caption")[0]</td>
                </tr>
                <tr>
                    <td>Manufacturer</td><td>@ListData("Win32_BIOS", "Manufacturer")[0]</td>
                </tr>
            </table>
        <h4>Printers</h4>
            <table class="table table-bordered">
                @foreach(var item in ListData("Win32_Printer", "Name")) {
                <tr><td>Name</td><td class="text-break">@item</td></tr> }
            </table>
    }
else {
    <span>NO DATA</span>
}
</div>

@code {

    [Parameter]
    public string? ComputerNameParameter { get; init; } = "";
    [CascadingParameter(Name = "ComputerName")]
    public string ComputerName { get; private set; } = "";

    private List<string[]>? data = null;
    private List<string[]>? dataFiltered = null;
    private Dictionary<string, string> users = new Dictionary<string, string>{};
    private string updateText = "";
    string time = "NA";
    string IP = "WAITING FOR IP";

    enum Modes { card, full, control };
    Modes mode = Modes.card;

    struct Button
    {
        public string Name { get; set; }
        public string Text { get; set; }
        public bool active { get; set; }

        public Button() : this("button", "text", false) {}

        public Button(string n, string t, bool a) {
            Name = n;
            Text = t;
            active = a;
        }
    }
    List<Button> buttons = new List<Button>
        {
            new Button("all", "Сводка", true),
            new Button("full", "Всё", false),
            new Button("control", "Управление", false),
        };

    protected async override Task OnInitializedAsync()
    {
        if (!string.IsNullOrEmpty(ComputerNameParameter)) ComputerName = ComputerNameParameter;
        await GetUsers();
        await LoadData(ComputerName, "brief");
        GetIp(ComputerName);
    }

    private async Task LoadData(string computer, string class_) // class_ = class, "brief" or empty
    {
        var data1 = await DataFetcher.GetData(computer, class_);

        if (data1 != null)
        {
            data = new List<string[]>{};
            foreach (var rec in data1)
            {
                if (rec["class"] == "Win32_ComputerSystem" && rec["param"] == "UserName") {
                    string t_login = rec["value"].Substring(rec["value"].IndexOf('\\')+1).ToLower();
                    string t_user = users.ContainsKey(t_login) ? users[t_login] : "Нет имени";
                    data.Add(new string[] { rec["class"], rec["param"], $"{rec["value"]} ({t_user})" }); }
                else
                    data.Add(new string[] { rec["class"], rec["param"], rec["value"] });
            }
            dataFiltered = data;
            time = ParseTime(ListData("Win32_OperatingSystem", "LocalDateTime")[0]);
        }
    }

    private string ParseTime(string timeString)
    {
        DateTime t = DateTime.MinValue;
        if (timeString.Length < 14) return "NA";
        if (!DateTime.TryParseExact(timeString.Substring(0, 14), "yyyyMMddHHmmss", new CultureInfo("ru-RU"), DateTimeStyles.None, out t)) return "NA";
        return $"{t:dd}.{t:MM}.{t:yyyy} {t:HH}:{t:mm}:{t:ss}";
    }

    private void Click(Button btn)
    {
        Tab(btn.Name);
        buttons = buttons.Select(b => { if (b.Name == btn.Name) b.active = true; else b.active = false; return b; } ).ToList();
    }

    private void Tab(string tab)
    {
        if (data != null)
        {
            switch (tab) {
                case "all":
                    dataFiltered = data;
                    mode = Modes.card;
                    break;
                case "full":
                    dataFiltered = new List<string[]>{};
                    mode = Modes.full;
                    break;
                case "control":
                    mode = Modes.control;
                    break;
            }
        }
    }

    private async void Update()
    {
        var text = await DataFetcher.RequestUpdate(ComputerName);
        if (!string.IsNullOrEmpty(text)) updateText = text;
        StateHasChanged(); // Slower but whatever
    }

    private async void GetIp(string ComputerName)
    {
        var p = new Ping();
        try
        {
            var res = await p.SendPingAsync(ComputerName, 2000);
            if (res.Status == IPStatus.Success)
                IP = res.Address.ToString();
            else
                IP = "NOT AVAILABLE";
        }
        catch { IP = "NETWORK ERROR"; }
        StateHasChanged();
    }

    private async Task GetUsers()
    {
        users = await DataFetcher.GetUsers();
    }

    private string[] ListData(string classname, string param)
    {
        if (dataFiltered != null) {
            var find = dataFiltered.FindAll(s => s[0] == classname && s[1] == param).Select(s => s.ElementAtOrDefault(2) ?? "NA").ToArray();
            if (find.Length < 1) return new string[] {"NA"};
            return find;
        }
        return new string[] {"NA"};
    }

    private string[] ListMonitors() // If there's a UserFriendlyName, use it, otherwise parse from InstanceName
    {
        if (dataFiltered != null) {
            var monitorInfo = dataFiltered.FindAll(s => s[0] == "WmiMonitorID").ToArray();
            if (monitorInfo.Length < 1) return new string[] {"NA"};
            var monitors = new string[] { };
            for (int i = 0; i < monitorInfo.Length; i++)
            {
                string t = string.Empty;
                if (monitorInfo[i][1] == "InstanceName")
                {
                    if (i+1 < monitorInfo.Length && monitorInfo[i+1][1] == "UserFriendlyName")
                    {
                        t = ParseFromASCII(monitorInfo[i+1][2]);
                    } else 
                    {
                        t = CutFromInstanceName(monitorInfo[i][2]);
                    }
                    monitors = monitors.Append(t).ToArray();
                }
            }
            return monitors;
        }
        return new string[] {"NA"};
    }

    private string ParseFromASCII(string ascii)
    {
        // ascii looks like [66, 101, 110, 81, 32, 71, 50, 48, 48, 48, 87, 0, 0] // BenQ G2000W
        ascii = ascii.Trim('[', ']');
        char[] chars = ascii.Split(", ").Where(s => s != "0").Select(s => (char)int.Parse(s)).ToArray();
        string res = new string(chars);
        if (res.Length > 0) return res;
        return string.Empty;
    }

    private string CutFromInstanceName(string instanceName)
    {
        // instanceName looks like DISPLAY\HWP2971\4&1a3f0b4b&0&UID0
        if (instanceName.Length > 0)
        {
            int i = instanceName.IndexOf('\\');
            int j = instanceName.LastIndexOf('\\');
            if (i > 0 && j > 0) return instanceName.Substring(i+1, j-i-1);
        }
        return instanceName;
    }

    private string ParseToMB(string bytes)
    {
        long b;
        if (!long.TryParse(bytes, out b)) return "0";
        if ((b = (b-1) / 1024 + 1) < 4096) return b.ToString() + " KB";
        if ((b = (b-1) / 1024 + 1) < 4096) return b.ToString() + " MB";
        if ((b = (b-1) / 1024 + 1) < 4096) return b.ToString() + " GB";
        return "What is this number??? Investigate pls.";
    }
}
