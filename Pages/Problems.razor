@page "/problems"
@inject _20strike_ui.Data.DataFetcher DataFetcher

<PageTitle>Problem search</PageTitle>

@for (int i = 0; i < problems.Length; i++)
{
    int n = i;
    <div><input type="checkbox" class="form-check-input" name="@problems[n].Name" id="@problems[n].Name" @bind=problems[n].Selected> <label class="form-check-label" for="@problems[n].Name">@problems[n].Title</label></div>
}
<br>
<input type="text" class="form-control" style="max-width: 500px;" name="parameter" id="parameter" placeholder="Extra parameters" @bind="parameter">
<hr>

<div class="progress" style="height: 52px;">
  <div class="progress-bar" role="progressbar" style="width: @progress%" aria-valuenow="50" aria-valuemin="0" aria-valuemax="100">
    <input type="button" class="btn @btnClass mx-2" style="position: absolute;" value="@btnText" @onclick="Search"></div>
</div>

<hr>
<hr>
@{int c = 0;}
<ul id="myUL">
@foreach (var (computer, problem) in problemsFound)
{
    c += 1;
    <CascadingValue Name="ComputerName" Value="@computer">
        <li>
            <div><ComputerRecord /> — @problem</div>
        </li>
    </CascadingValue>
}
</ul>
<hr>Всего: @c.ToString()
<p></p>

@code {
    private string parameter { get; set; } = "";

    private List<string> computers = new List<string>{};
    private List<KeyValuePair<string, string>> problemsFound = new List<KeyValuePair<string, string>>{};

    private bool SearchActive = false;
    private int progress = 0;
    private string btnClass = "btn-primary";
    private string btnText = "Find";

    struct Problem {
        public string Name;
        public string Title;
        public bool Selected;

        public Problem()
        {
            Name = "";
            Title = "";
            Selected = false;
        }

        public Problem(string name, string title, bool Selected = false)
        {
            this.Name = name;
            this.Title = title;
            this.Selected = Selected;
        }
    }

    Problem[] problems = new Problem[]{
        new Problem("no_data", "Нет данных"),
        new Problem("no_ping", "Не доступен"),
        new Problem("disk_space", "Мало места на диске"),
        new Problem("installed", "Установлена программа"),
        new Problem("not_installed", "Не установлена программа"),
        new Problem("old_os", "Старая ОС"),
        new Problem("abandoned", "Давно не включался"),
        new Problem("errors", "Много ошибок за день"),
        new Problem("smart_failure", "Проблемный статус SMART") };

    private async void Search()
    {
        if (SearchActive) return;
        SearchActive = true;
        problemsFound.Clear();
        computers = await DataFetcher.GetComputers();
        int total = computers.Count;
        if (total == 0) progress = -1;
        int current = 0;
        btnClass = "btn-secondary";
        foreach (var computer in computers)
        {
            current += 1;
            progress = (int) ( (float) current / (float) total * 100);
            btnText = $"{progress} %";
            StateHasChanged();
            foreach (var problem in problems)
            {
                if (!problem.Selected) continue;
                (bool result, string comment) check = await HasProblem(problem.Name, computer);
                if (check.result) {
                    problemsFound.Add(new KeyValuePair<string, string>($"{computer}", $"{problem.Title} ({check.comment})"));
                }
            }
        }
        SearchActive = false;
        btnClass = "btn-primary";
        btnText = "Find";
        progress = 0;
        StateHasChanged();
    }

    private async Task<(bool, string)> HasProblem(string problem, string computer)
    {
        if (problem == "no_data")
        {
            var data = await LoadData(computer, "Win32_ComputerSystem");
            if (data == null || data.Count == 0) return (true, "");
        }
        if (problem == "disk_space")
        {
            var data = await LoadData(computer, "Win32_LogicalDisk");
            foreach (var item in data)
            {
                if (item.ContainsKey("Size") && item.ContainsKey("FreeSpace") && item.ContainsKey("DriveType") && item["DriveType"] == "3")
                {
                    float Size = float.Parse(item["Size"]); // Unsafe!!!
                    float FreeSpace = float.Parse(item["FreeSpace"]);
                    float Percentage = FreeSpace / Size * 100;
                    if (Percentage < 5) return (true, $"{Percentage:F1}%");
                }
            }
        }
        if (problem == "installed" || problem == "not_installed")
        {
            var data = await LoadData(computer, "Meta_Software");
            foreach (var item in data)
            {
                if (item.ContainsKey("DisplayName") && item["DisplayName"].ToLower().Contains(parameter.ToLower()))
                {
                    if (problem == "installed") return (true, item["DisplayName"]);
                    if (problem == "not_installed") return (false, "");
                }
            }
            if (problem == "not_installed") return (true, "");
        }
        if (problem == "smart_failure")
        {
            var data = await LoadData(computer, "Win32_DiskDrive");
            foreach (var item in data)
                if (item.ContainsKey("Status") && item["Status"] != "OK") return (true, item["Status"]);
        }
        if (problem == "old_os")
        {
            var data = await LoadData(computer, "Win32_OperatingSystem");
            foreach (var item in data)
                if (item.ContainsKey("BuildNumber")) {
                    int build;
                    if (!int.TryParse(item["BuildNumber"], out build)) return (true, "Неизвестный билд");
                    if (build < 9600) return (true, item.ContainsKey("Caption") ? item["Caption"] : build.ToString());
                }
        }
        if (problem == "abandoned")
        {
            var data = await LoadData(computer, "Win32_OperatingSystem");
            foreach (var item in data)
                if (item.ContainsKey("LocalDateTime")) {
                    string timeString = item["LocalDateTime"];
                    DateTime t = DateTime.MinValue;
                    if (timeString.Length < 14) return (true, "Ошибка времени");
                    if (!DateTime.TryParseExact(timeString.Substring(0, 14), "yyyyMMddHHmmss", new System.Globalization.CultureInfo("ru-RU"), System.Globalization.DateTimeStyles.None, out t)) return (true, "Ошибка времени");
                    DateTime now = DateTime.Now;
                    TimeSpan diff = now - t;
                    if (diff.Days > 30) return (true, $"{diff.Days} дней");
                }
        }
        if (problem == "errors")
        {
            var data = await LoadData(computer, "Win32_NTLogEvent");
            Dictionary<DateTime, int> counter = new Dictionary<DateTime, int> { };
            TimeSpan countPeriod = new TimeSpan(90, 0, 0, 0);
            foreach (var item in data)
            {
                if (item.ContainsKey("TimeGenerated") && item["TimeGenerated"].Length >= 8)
                {
                    string date_t = item["TimeGenerated"].Substring(0, 8);
                    DateTime date = new DateTime(int.Parse(date_t.Substring(0, 4)), int.Parse(date_t.Substring(4, 2)), int.Parse(date_t.Substring(6, 2)));
                    if (DateTime.Now - date < countPeriod) {
                        if (counter.ContainsKey(date)) counter[date] += 1;
                            else counter.Add(date, 1);
                    }
                }
            }
            foreach (var (date, count) in counter)
                if (count > 5) return (true, $"{date:yyyy}-{date:MM}-{date:dd} — {count} штук");
        }
        return (false, "");
    }

    private async Task<List<Dictionary<string, string>>> LoadData(string computer, string class_)
    {
            var data1 = await DataFetcher.GetData(computer, class_);
            List<Dictionary<string, string>> data = new List<Dictionary<string, string>> {};
            if (data1 != null)
            {
                string prev = "ZZZZ";
                foreach (var rec in data1)
                {
                    if (prev.CompareTo(rec["param"]) == 1 || prev.CompareTo(rec["param"]) == 0) data.Add(new Dictionary<string, string>{});
                    data.Last().Add(rec["param"], rec["value"]);
                    prev = rec["param"];
                }
            }
            return data;
    }
}
